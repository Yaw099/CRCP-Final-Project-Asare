package com.example;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class MarkovGenerator {
    
    private Map<List<String>, Double> transitionTable;
    private int orderM;

    public MarkovGenerator(int orderM, Map<List<String>, Double> transitionTable) {
        this.orderM = orderM;
        this.transitionTable = transitionTable;
    }

    /**
     * Forecasts the next state based on the current state.
     *
     * @param currentState The current sequence of states (the history).
     * @return The predicted next state.
     */

    public void createTransitionTable(Map<List<String>, Double> probabilities) {
        // Logic to create a transition table from probabilities
        // Clear the existing transition table
        transitionTable.clear();

        // Iterate through each entry in the provided probabilities map
        for (Map.Entry<List<String>, Double> entry : probabilities.entrySet()) {
            List<String> stateSequence = entry.getKey();
            Double probability = entry.getValue();

            // Check if the state sequence is valid
            if (stateSequence == null || stateSequence.size() != orderM + 1) {
                throw new IllegalArgumentException("Each key in probabilities must be a list of " + (orderM + 1) + " states.");
            }

            // Add the state sequence and its probability to the transition table
            transitionTable.put(new ArrayList<>(stateSequence), probability);
        }
    }
    
    public String forecastNextState(List<String> currentState) {
    // Logic to forecast and return the next state
    if (currentState == null || currentState.size() != orderM) {
        throw new IllegalArgumentException("Current state must not be null and must be of size " + orderM);
    }

    String nextState = null;
    double highestProbability = 0.0;

    // Iterate through the transition table to find the most likely next state
    for (Map.Entry<List<String>, Double> entry : transitionTable.entrySet()) {
        List<String> key = entry.getKey();
        Double probability = entry.getValue();

        // Check if the beginning of the key matches the current state
        if (key.subList(0, orderM).equals(currentState)) {
            // If this transition has a higher probability, update the next state
            if (probability > highestProbability) {
                highestProbability = probability;
                nextState = key.get(orderM); // Assuming the next state is at index orderM
            }
        }
    }

    if (nextState == null) {
        throw new IllegalStateException("No transition found for the current state.");
    }

    return nextState;
}

    public void initialize() {
        // Initialization logic
    }
    
    public void printTransitionTable() {
        // Print or log the transition table for debugging
    }
    
}
